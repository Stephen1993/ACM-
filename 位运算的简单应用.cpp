// shiftOperation.cpp : 定义控制台应用程序的入口点。
/*******************************************
  author:老六是Jerry
  functoin:位运算
********************************************/

#include "stdafx.h"
#include <Windows.h>
#include <iostream>
using namespace std;

int _tmain(int argc, _TCHAR* argv[])
{
    //获得int型最大值
    cout<<((1<<31)-1)<<endl;    //int占4个字节，共可以表示2^32个数，由于可以表示负数，所以最大数为2^31-1（最高位为符号位）
    //获得int型最小值
    cout<<(1<<31)<<endl;    //int型表示的负数的最小值
    cout<<"==============================\n";
	
    //判断奇偶性
    int p=12344;
    if((p&1)==1)    //非常简单的道理，奇数用二进制表示最后一位一定为1，而偶数最后一位一定是0，所以与1（末位为1，其它全0）做与操作即                      可判断
    {
	cout<<p<<"是奇数！"<<endl;
    }
    else
    {
	cout<<p<<"是偶数！"<<endl;
    }
    cout<<"==============================\n";

    //不用临时变量交换两个数
    //1.不用移位操作实现
    int a=2,b=3;
    a=a*b;
    b=a/b;
    a=a/b;
    cout<<a<<","<<b<<endl;
    int c=4,d=5;
    c=c+d;
    d=c-d;
    c=c-d;
    cout<<c<<","<<d<<endl;
    //2.移位操作实现
    int e=6,f=7;
    //e=e^f;    //第一步按位异或相当于把e和f不同的位找出来，存入e中，不同的位值为1 （设e^f=g（g的值存在e中））
    //f=f^e;    //第二步将f与得到的不同的位的值按位异或，即会得到另一个值（e^f=g -->  f^g=e）  
    //e=e^f;    //第三步f已经转换为原来的e,所以用f和现在的e（存的是不同的位的信息）按位异或即可得到原f的值
    //上面三步可以写成一步
    e^=f^=e^=f;   
    cout<<e<<","<<f<<endl;
    cout<<"==============================\n";


    //取绝对值
    //原理：正数（考虑int类型）右移31位之后等于0，负数右移31位之后等于-1
    int h=-6;
    cout<<((h^(h>>31))-(h>>31))<<endl;
    //若h是正数，h^0-0=h,值不变
    //若h是负数，h^(-1)+1,将h的补码与-1的补码按位异或，再加1，得到绝对值
    cout<<"==============================\n";


    //取两个数的较小、较大值
    int i=2,j=3;
    //取两数的较大值  
    cout<<((j&((i-j)>>31)) | (i&(~(i-j)>>31)))<<endl;    //若i-j>=0，右移31位后为0，j&0=0;~(i-j)右移31位之后为-1，i&-1=i                                                           (-1的补码为1111...1111) 
    //取两数的较小值
    cout<<((i&((i-j)>>31)) | (j&(~(i-j)>>31)))<<endl;    //同理 
    cout<<"==============================\n";


    //判断一个数是不是2的幂
    int k=31;
    cout<<((k&(k-1))==0)<<endl;    //若一个数是2的幂，则这个数转换为二进制后应该只有一位值为1（符号位除外），-1之后此位置0，后面                                     的位全置1
    cout<<"==============================\n";


    //求两个整数的平均值
    int m=6,n=8;
    //简单方法，先相加再除以2
    cout<<((m+n)>>1)<<endl;
    //另一方法
    cout<<((m^n)>>1)+(m&n)<<endl;    //m^n得到两数的对应位中有且仅有一个为1的部分，并除以2，m&n得到对应位都为1的部分，即得到平                                        均值
    cout<<"==============================\n";

    Sleep(5000);
    return 0;
}

